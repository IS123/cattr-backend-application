integration_testing:
  image: php:7.4-alpine
  services:
    - name: mysql:latest
      alias: mysql
      command: ["--default-authentication-plugin=mysql_native_password"]
  variables:
    MYSQL_DATABASE: cattr_tests
    MYSQL_ROOT_PASSWORD: secret
  stage: test
  before_script:
    - apk update
    - apk add libpng-dev freetype-dev libjpeg-turbo-dev libjpeg-turbo libpng freetype libzip libzip-dev git
    - docker-php-ext-configure gd --with-jpeg=/usr/include/ --with-freetype=/usr/include/
    - docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) gd
    - docker-php-ext-install bcmath zip pdo_mysql
    - apk add --no-cache $PHPIZE_DEPS
    - pecl install xdebug
    - docker-php-ext-enable xdebug
    - curl --silent --show-error https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
  script:
    - composer install
    - cp .env.testing.example .env.testing
    - cp modules_statuses.example.json modules_statuses.json
    - php artisan migrate --env=testing
    - php artisan db:seed --class=RoleSeeder --env=testing
    - vendor/phpunit/phpunit/phpunit --coverage-text --colors=never --configuration phpunit.xml tests/Feature/

apidoc_deploy:
  image: node:alpine
  stage: deploy
  only:
    - release
  before_script:
    - 'which ssh-agent || ( apk add --update openssh )'
    - eval $(ssh-agent -s)
    - echo "$CI_SSH_DEPLOY_SECRET" | ssh-add -
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - npm install
  script:
    - npm run api-nsl
    - ssh cattr-deploy@docs.cattr.app 'rm -rf /srv/docs/api/*'
    - scp -r apidoc/* cattr-deploy@docs.cattr.app:/srv/docs/api

live_deploy:
  image: alpine
  stage: deploy
  only:
    - release
  before_script:
    - 'which ssh-agent || ( apk add --update openssh )'
    - eval $(ssh-agent -s)
    - echo "$CI_KEY" | base64 -d | ssh-add -
    - mkdir ~/.ssh
    - ssh-keyscan -H $CI_HOST >> ~/.ssh/known_hosts
    - curl -sL https://sentry.io/get-cli/ | sh
    - sentry-cli releases new "$CI_COMMIT_SHORT_SHA"
  script:
    - sentry-cli releases set-commits "$CI_COMMIT_SHORT_SHA" --auto
    - start=$(date +%s)
    - ssh $CI_USER@$CI_HOST 'cd /opt/cattr/cattr/backend && git pull && php artisan migrate'
    - now=$(date +%s)
    - sentry-cli releases deploys "$CI_COMMIT_SHORT_SHA" new -e "release" -t $((now-start))
  after_script:
    - sentry-cli releases finalize "$CI_COMMIT_SHORT_SHA"

staging_deploy:
  image: alpine
  stage: deploy
  only:
    - staging
  before_script:
    - 'which ssh-agent || ( apk add --update openssh )'
    - eval $(ssh-agent -s)
    - echo "$STAGING_KEY" | base64 -d | ssh-add -
    - mkdir ~/.ssh
    - ssh-keyscan -H $STAGING_HOST >> ~/.ssh/known_hosts
    - apk add curl bash
    - curl -sL https://sentry.io/get-cli/ | bash
    - sentry-cli releases new "$CI_COMMIT_SHORT_SHA"
  script:
    - sentry-cli releases set-commits "$CI_COMMIT_SHORT_SHA" --auto
    - start=$(date +%s)
    - ssh $STAGING_USER@$STAGING_HOST 'cd backend && git pull && cp -f .env.staging .env && cat .env.sentry >> .env && cp -f modules_statuses.staging.json modules_statuses.json && php artisan config:cache && php artisan migrate'
    - now=$(date +%s)
    - sentry-cli releases deploys "$CI_COMMIT_SHORT_SHA" new -e "release" -t $((now-start))
  after_script:
    - sentry-cli releases finalize "$CI_COMMIT_SHORT_SHA"

demo_deploy:
  image: alpine
  stage: deploy
  only:
    - demo
  before_script:
    - 'which ssh-agent || ( apk add --update openssh )'
    - eval $(ssh-agent -s)
    - echo "$DEMO_CI_KEY" | base64 -d | ssh-add -
    - mkdir ~/.ssh
    - ssh-keyscan -H $DEMO_CI_HOST >> ~/.ssh/known_hosts
  script:
    - ssh $DEMO_CI_USER@$DEMO_CI_HOST 'cd demo && docker-compose build --no-cache --force-rm demo'
    - ssh $DEMO_CI_USER@$DEMO_CI_HOST 'cd demo && docker-compose down -v && docker-compose up -d demo'
